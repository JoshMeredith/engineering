"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[450],{6029:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"2022-04-28-on-the-inlining-of-integer-and-natural-operations","metadata":{"permalink":"/2022-04-28-on-the-inlining-of-integer-and-natural-operations","source":"@site/blog/2022-04-28-on-the-inlining-of-integer-and-natural-operations-bot8CUQvoe-import.md","title":"On the inlining of Integer and Natural operations","description":"Sylvain Henry (sylvain.henry@iohk.io)","date":"2022-04-28T00:00:00.000Z","formattedDate":"April 28, 2022","tags":[{"label":"ghc","permalink":"/tags/ghc"}],"readingTime":4.15,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-04-28-on-the-inlining-of-integer-and-natural-operations","title":"On the inlining of Integer and Natural operations","authors":[],"tags":["ghc"],"custom_edit_url":null},"nextItem":{"title":"GHC March 2022 Update","permalink":"/2022-04-19-ghc-march-2022-update"}},"content":"**Sylvain Henry (sylvain.henry@iohk.io)** \\n\\nIn this post I discuss the inlining of Integer and Natural operations in Haskell. It\u2019s a promising performance work I\u2019ve been conducting six months ago, which was blocked by an independent issue, but that I will likely resume soon as the issue has been fixed in the meantime.\\n---\\n\\nTo follow this post, you must know that `Natural` numbers are represented as follows in `ghc-bignum`:\\n\\n```haskell\\n-- | Natural number\\n--\\n-- Invariant: numbers <= WORD_MAXBOUND use the `NS` constructor\\ndata Natural\\n   = NS !Word#\\n   | NB !BigNat#\\n```\\n\\nSmall naturals are represented with a `Word#` and large ones with a `BigNat#` (a `ByteArray#`).\\n\\nNow consider the following simple example using Natural:\\n\\n```haskell\\n-- | Add 2 to a Word. Use Natural to avoid Word overflow\\nfoo :: Word -> Natural\\nfoo x = fromIntegral x + 2\\n```\\n\\nThere are only small naturals involved: `fromIntegral x` is small because `x` is a `Word`, and `2` is small. We could hope that GHC would use `Word#` primops to implement this and would allocate a `Natural` heap object for the result *only*. However it\u2019s not what happens currently, even in GHC HEAD. In the following STG dump, we can see that a `Natural` heap object is allocated for `x` before calling `naturalAdd` (`let` bindings in STG reflect heap allocations):\\n\\n```haskell\\nfoo1 = NS! [2##];\\n\\nfoo =\\n    \\\\r [x_sXn]\\n        case x_sXn of {\\n        W# x#_sXp ->\\n        let { sat_sXq = NS! [x#_sXp]; } in  naturalAdd sat_sXq foo1;\\n        };\\n```\\n\\nLet\u2019s look at `naturalAdd`:\\n\\n```haskell\\n-- | Add two naturals\\nnaturalAdd :: Natural -> Natural -> Natural\\n{-# NOINLINE naturalAdd #-}\\nnaturalAdd (NS x) (NB y) = NB (bigNatAddWord# y x)\\nnaturalAdd (NB x) (NS y) = NB (bigNatAddWord# x y)\\nnaturalAdd (NB x) (NB y) = NB (bigNatAdd x y)\\nnaturalAdd (NS x) (NS y) =\\n   case addWordC# x y of\\n      (# l,0# #) -> NS l\\n      (# l,c  #) -> NB (bigNatFromWord2# (int2Word# c) l)\\n```\\n\\nWe are clearly in the last case where both arguments are small. It seems beneficial to allow this function to be inlined. If we did we would get:\\n\\n```javascript\\nfoo =\\n    \\\\r [x_s158]\\n        case x_s158 of {\\n        W# x#_s15a ->\\n        case addWordC# [x#_s15a 2##] of {\\n        (#,#) l_s15c ds_s15d ->\\n        case ds_s15d<TagProper> of ds1_s15e {\\n          __DEFAULT ->\\n              case int2Word# [ds1_s15e] of sat_s15f {\\n              __DEFAULT ->\\n              case bigNatFromWord2# sat_s15f l_s15c of ds2_s15g {\\n              __DEFAULT -> NB [ds2_s15g];\\n              };\\n              };\\n          0# -> NS [l_s15c];\\n        };\\n        };\\n        };\\n```\\n\\nwhich produces much better assembly code, especially if there is no carry:\\n\\n```\\n    addq $2,%rax       ; add 2 to a machine word\\n\\tsetc %bl           ; test the carry.\\n\\tmovzbl %bl,%ebx    ; it could be done\\n\\ttestq %rbx,%rbx    ; more efficiently\\n\\tjne _blk_c17c      ; with \\"jc\\"\\n_blk_c17i:\\n\\tmovq $NS_con_info,-8(%r12) ; alloc NS datacon value\\n\\tmovq %rax,(%r12)           ; with the addition result as payload.\\n\\tleaq -7(%r12),%rbx         ; make it the first argument\\n\\taddq $8,%rbp               ; and then\\n\\tjmp *(%rbp)                ; call continuation\\n...\\n```\\n\\nSo why aren\u2019t we always inlining `naturalAdd`? We even explicitly disallow it with a `NOINLINE` pragma. The reason is that `naturalAdd` and friends are involved in constant-folding rules.\\n\\nFor example, consider:\\n\\n```haskell\\nbar :: Natural -> Natural\\nbar x = x + 2\\n\\nbaz = bar 0x12345678913245678912345679123456798\\n```\\n\\nCurrently we get the following Core:\\n\\n```haskell\\nbar1 = NS 2##\\n\\nbar = \\\\ x_aHU -> naturalAdd x_aHU bar1\\n\\nbaz = NB 99114423092485377935703335253042771879834\\n```\\n\\nYou can see that `baz`  is a constant thanks to constant-folding.\\n\\nHowever if we let `naturalAdd` inline we get:\\n\\n```haskell\\nbaz\\n  = case bigNatAddWord# 99114423092485377935703335253042771879832 2##\\n    of ds_d11H\\n    { __DEFAULT ->\\n    NB ds_d11H\\n    }\\n```\\n\\n`baz` is no longer a constant.\\n\\nA solution would be to add constant-folding rules for `BigNat#` functions, such as `bigNatAddWord#`. This is exactly what we have started doing in [#20361](https://gitlab.haskell.org/ghc/ghc/-/issues/20361). Our new plan is:\\n\\n* Make `BigNat#` operation `NOINLINE` and add constant-folding rules for them\\n* Make Integer/Natural operations `INLINEABLE` (expose their unfolding)\\n* Hence rely on constant-folding for `Word#/Int#/BigNat#` to provide constant folding for `Integer` and `Natural`\\n\\nThe good consequences of this plan are:\\n\\n* Less allocations when bignum operations are inlined and some of the arguments are known to be small/big or fully known (constant).\\n* `Integer` and `Natural` are less magical: you can implement your own similar types and expect the same performance without having to add new rewrite rules\\n\\nThere were some unforeseen difficulties with this plan though:\\n\\n\\n1. Some of the rewrite rules we need involve unboxed values such as `BigNat#` and `Word#` and the weren\u2019t supported. Luckily, this has been recently fixed ([#19313](https://gitlab.haskell.org/ghc/ghc/-/issues/19313)) by removing the \u201capp invariant\u201d ([#20554](https://gitlab.haskell.org/ghc/ghc/-/issues/20554)). Thanks Joachim! That\u2019s the reason why we could resume this work now.\\n2. Some unfoldings (RHSs) become bigger due to the inlining of bignum operations. Hence they may not themselves be inlined further due to inlining thresholds even if it would be beneficial. A better inlining heuristic would fix this (see [#20516](https://gitlab.haskell.org/ghc/ghc/-/issues/20516)). It will likely be the topic of the next post."},{"id":"2022-04-19-ghc-march-2022-update","metadata":{"permalink":"/2022-04-19-ghc-march-2022-update","source":"@site/blog/2022-04-19-ghc-march-2022-update-jeDstmSW5A-import.md","title":"GHC March 2022 Update","description":"JS Backend","date":"2022-04-19T00:00:00.000Z","formattedDate":"April 19, 2022","tags":[{"label":"ghc","permalink":"/tags/ghc"}],"readingTime":2.4,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-04-19-ghc-march-2022-update","title":"GHC March 2022 Update","authors":[],"tags":["ghc"],"custom_edit_url":null},"prevItem":{"title":"On the inlining of Integer and Natural operations","permalink":"/2022-04-28-on-the-inlining-of-integer-and-natural-operations"},"nextItem":{"title":"haskell.nix March Update","permalink":"/2022-04-08-haskell-nix-march-update"}},"content":"## JS Backend\\n\\nIn March the team focused on porting more GHCJS code to GHC head.\\n\\n* Most of us are new to GHCJS\u2019s codebase so we are taking some time to better understand it and to better document it as code gets integrated into GHC head.\\n* Development process: initially we had planned to integrate features one after the others into GHC head. However it was finally decided that features would be merged into a [wip/javascript-backend](https://gitlab.haskell.org/ghc/ghc/-/commits/wip/javascript-backend) branch first and then later merged into GHC head. After trying this approach we decided to work directly into another branch: [wip/js-staging](https://gitlab.haskell.org/ghc/ghc/-/commits/wip/js-staging) . Opening merge requests that can\u2019t be tested against a branch that isn\u2019t GHC head didn\u2019t bring any benefit and slowed us too much.\\n* Documentation: we wrote a document comparing the different approaches to target JavaScript/WebAssembly [ https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript](https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript)\\n* RTS: some parts of GHCJS\u2019s RTS are generated from Haskell code, similarly to code generated with the genapply program in the C RTS. This code has been ported to GHC head. As JS linking---especially linking with the RTS---will only be performed by GHC in the short term, we plan to make it generate this code dynamically at link time.\\n* Linker: most of GHCJS\u2019s linker code has been adapted to GHC head. Because of the lack of modularity of GHC, a lot of GHC code was duplicated into GHCJS and slightly modified. Now that both codes have diverged we need to spend some time making them converge again, probably by making the Linker code in GHC more modular.\\n* Adaptation to GHC head: some work is underway to replace GHCJS\u2019s Objectable type-class with GHC\u2019s Binary type-class which serves the same purpose. Similarly a lot of uses of Text have been replaced with GHC\u2019s ShortText or FastString.\\n* Template Haskell: GHCJS has its own TH runner which inspired GHC\u2019s external interpreter (\u201cIserv\u201d) programs. We have been exploring options to port TH runner code as an Iserv implementation. The Iserv protocol uses GADTs to represent its messages which requires more boilerplate code to convert them into JS because we can\u2019t automatically derive aeson instances for them.\\n* Plugins: we have an MR adding support for \u201cexternal static plugins\u201d to GHC [!7377](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377). Currently it only supports configuring plugins *via* environment variables. We have been working on adding support for command-line flags instead.\\n* Testsuite: we have fixed GHC\u2019s build system so that it can run GHC\u2019s testsuite when GHC is built as a cross-compiler ([!7850](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7850)). There is still some work to do (tracked in [#21292](https://gitlab.haskell.org/ghc/ghc/-/issues/21292)) to somehow support tests that *run* compiled programs: with cross-compilers, target programs can\u2019t be directly executed by the host architecture.\\n\\n## Misc\\n\\n* [Performance book](https://github.com/haskellfoundation/tech-proposals/pull/26): some time was spent on the infrastructure (CI) and on switching the format of the book to ReStructured Text\\n* Modularity: some time was spent discussing GHC\u2019s design and refactoring (c.f. [!7442](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7442) and [#20927](https://gitlab.haskell.org/ghc/ghc/-/issues/20927))."},{"id":"2022-04-08-haskell-nix-march-update","metadata":{"permalink":"/2022-04-08-haskell-nix-march-update","source":"@site/blog/2022-04-08-haskell-nix-march-update-XOLP1OBCuw-import.md","title":"haskell.nix March Update","description":"Changes","date":"2022-04-08T00:00:00.000Z","formattedDate":"April 8, 2022","tags":[{"label":"nix","permalink":"/tags/nix"}],"readingTime":1.99,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-04-08-haskell-nix-march-update","title":"haskell.nix March Update","authors":[],"tags":["nix"],"custom_edit_url":null},"prevItem":{"title":"GHC March 2022 Update","permalink":"/2022-04-19-ghc-march-2022-update"},"nextItem":{"title":"GHC February 2022 Update","permalink":"/2022-03-09-ghc-february-2022-update"}},"content":"## Changes\\n\\n* To cross compile Haskell code for windows a `wine` process must be used to evaluate Template Haskell code at compile time.  Some times this code needs DLLs to be present for the Template Haskell code to run.  We had been maintaining a list of DLLs manually ([#1400](https://github.com/input-output-hk/haskell.nix/pull/1400) for instance added `secp256k1`).  A more general solution ([#1405](https://github.com/input-output-hk/haskell.nix/pull/1405)) was found that uses the `pkgsHostTarget` environment variable to obtain a list of all the packages dependencies.  Then the DLLs from the are made available to the `wine` process running the Template Haskell code.  This should make more libraries build correctly while reducing unnecessary dependencies.\\n* The way Haskell.nix cleans source trees has changed with [#1403](https://github.com/input-output-hk/haskell.nix/pull/1403), [#1409](https://github.com/input-output-hk/haskell.nix/pull/1409) and [#1418](https://github.com/input-output-hk/haskell.nix/pull/1418).  When using Nix `>=2.4` source in the store is now filtered in the same way it is locally.  This has a couple of key advantages:\\n  * It makes it less likely that results on CI systems (where the source is likely to be in the store) will differ from results for local builds (where the source is in a cloned git repository).\\n  * Potential for reducing load on CI.  Although more work may be needed, this kind of filtering combined with the experimental content addressing features of Nix reduce the required rebuilds.\\n* In the past rather cryptic error messages were given when an attempt was made to use an old version of GHC on a platform Haskell.nix did not support it.  In some cases Haskell.nix would even attempt to build GHC and only fail after some time.  Better error messages are now given right away when an attempt is made to use a GHC version that is not supported for a particular platform [#1411](https://github.com/input-output-hk/haskell.nix/pull/1411)\\n\\n## Version Updates\\n\\n* GHC 9.2.2 was added [#1394](https://github.com/input-output-hk/haskell.nix/pull/1394)\\n\\n## Bug fixes\\n\\n* `gitMinimal` replaces `git` to reduce the dependency tree of `cabalProject` functions [#1387](https://github.com/input-output-hk/haskell.nix/pull/1387)\\n* Less used of `allowSubstitutes=false` [#1389](https://github.com/input-output-hk/haskell.nix/pull/1389)\\n* Fixed `aarch64-linux` builds by using correct boot compiler [#1390](https://github.com/input-output-hk/haskell.nix/pull/1390)\\n* `icu-i18n` package mapping added to make `text-icu` build [#1395](https://github.com/input-output-hk/haskell.nix/pull/1395)\\n* Fixes needed for newer `nixpkgs` versions\\n  * Use list for `configureFlags` [#1396](https://github.com/input-output-hk/haskell.nix/pull/1396)\\n  * The spdx json file is in a `.json` output [#1397](https://github.com/input-output-hk/haskell.nix/pull/1397)\\n  * `gdk_pixbuf` is now `gdk-pixbuf` [#1398](https://github.com/input-output-hk/haskell.nix/pull/1398)\\n* Replaced deprecated NixOS binary cache settings in docs [#1410](https://github.com/input-output-hk/haskell.nix/pull/1410)\\n* Enable static build of `secp256k1` on musl [#1413](https://github.com/input-output-hk/haskell.nix/pull/1413)\\n\\nFinally, we\u2019d like to thank all the awesome contributors, who make\xa0`haskell.nix`\xa0a thriving open source project!\xa0:heart:"},{"id":"2022-03-09-ghc-february-2022-update","metadata":{"permalink":"/2022-03-09-ghc-february-2022-update","source":"@site/blog/2022-03-09-ghc-february-2022-update-bnE9FHoNRc-import.md","title":"GHC February 2022 Update","description":"JS backend","date":"2022-03-09T00:00:00.000Z","formattedDate":"March 9, 2022","tags":[{"label":"ghc","permalink":"/tags/ghc"}],"readingTime":1.87,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-03-09-ghc-february-2022-update","title":"GHC February 2022 Update","authors":[],"tags":["ghc"],"custom_edit_url":null},"prevItem":{"title":"haskell.nix March Update","permalink":"/2022-04-08-haskell-nix-march-update"},"nextItem":{"title":"2021 GHC update","permalink":"/2022-03-01-2021-ghc-update"}},"content":"## JS backend\\n\\nThis month we worked on adapting code from GHCJS to merge into GHC head. We also started discussing the implementation process publicly and especially with our colleagues at Well-Typed.\\n\\n* Ticket about adapting GHCJS\u2019 code into a proper JS backend for GHC has been opened \\\\[[#21078](https://gitlab.haskell.org/ghc/ghc/-/issues/21078)\\\\]. Feedback was very positive!\\n* There were discussions about the process and an agreement to target GHC 9.6 release \\\\[[email on ghc-devs](https://mail.haskell.org/pipermail/ghc-devs/2022-February/020580.html), [wiki page](https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript-backend)\\\\]\\n* `deriveConstants` is a program used to generate some header file included in the rts package. While it is mainly useful for native targets, we had to make it support Javascript targets \\\\[[!7585](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7585)\\\\]\\n* Javascript is going to be the first official target platform supported by GHC that has its own notion of managed heap objects. Hence we may need a new `RuntimeRep` to represent these values for Haskell codes interacting with JS codes via FFI. We opened [!7577](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7577) into which we tried to make this new `RuntimeRep` non JS specific so that it could be reused for future backends targeting other managed platforms (e.g. CLR, JVM). It triggered a lot of discussions summarized in [#21142](https://gitlab.haskell.org/ghc/ghc/-/issues/21142).\\n* GHCJS\u2019s code generator was ported to GHC head \\\\[[!7573](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7573)\\\\]. In its current state, we can generate Javascript unoptimised code -- the optimiser hasn\u2019t been ported yet -- by compiling a module with `-c -fjavascript`. It required many changes, not only to adapt to changes between GHC 8.10 and GHC head but also to avoid adding new package dependencies. It was also an opportunity to refactor and to document the code, which is still a work in progress.\\n* GHC doesn\u2019t use any lens library, hence to port the code generator we had to replace lenses with usual record accessors. It turned out that `case` alternatives in STG lacked them because they were represented with a triple. We took the opportunity to introduce a proper record type for them  [!7652](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7652)\\n\\n## Plutus-apps JS demo\\n\\n* We improved the proof of concept JavaScript library for generating Plutus transactions with a given set of constraints and lookups, exposing functionality from the `plutus-ledger-constraints` package. \\\\[[Report](https://github.com/hamishmack/plutus-apps/blob/1f331225853f502807aab370f82ec975bdec38ee/plutus-pab/mktx/README.md)\\\\]\\n\\n## Reporting\\n\\n* we wrote a blog post about the work we have done in 2021 as it wasn\u2019t covered anywhere else: <https://engineering.iog.io/2022-03-01-2021-ghc-update>"},{"id":"2022-03-01-2021-ghc-update","metadata":{"permalink":"/2022-03-01-2021-ghc-update","source":"@site/blog/2022-03-01-2021-ghc-update-g8gkJay36G-import.md","title":"2021 GHC update","description":"IOG is committed to improving Haskell developer experience, both by sponsoring the Haskell Foundation and by directly founding a team committed to this task: the Haskell DX team.","date":"2022-03-01T00:00:00.000Z","formattedDate":"March 1, 2022","tags":[{"label":"ghc","permalink":"/tags/ghc"}],"readingTime":8.415,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-03-01-2021-ghc-update","title":"2021 GHC update","authors":[],"tags":["ghc"],"custom_edit_url":null},"prevItem":{"title":"GHC February 2022 Update","permalink":"/2022-03-09-ghc-february-2022-update"},"nextItem":{"title":"haskell.nix February Update","permalink":"/2022-03-01-haskell-nix-february-update"}},"content":"IOG is committed to improving Haskell developer experience, both by [sponsoring the Haskell Foundation](https://iohk.io/en/blog/posts/2020/11/04/iohk-sponsors-new-haskell-foundation) and by directly founding a team committed to this task: the Haskell DX team.\\n\\nThe team now tries to provide regular (monthly) updates about its work. This post is a bit longer because it covers all of 2021 which has not been covered anywhere else.\\n\\n## Code generation\\n\\n* Added a new backend for AArch64 architectures, especially to support Apple\u2019s M1. Previously AArch64 was only supported via the LLVM based backend which is much slower. \\\\[[!5884](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5884)\\\\]\\n* Added support for Apple\u2019s M1 calling convention. In GHC 9.2.1 it implied making lifted sized types (e.g. `Word8`, `Int16`...) use their unlifted counterparts (e.g. `Word8#`, `Int16#`...); in GHC 8.10.7 \u2013 a minor release \u2013\xa0 a less invasive but more fragile solution was implemented \\\\[[commit](https://gitlab.haskell.org/ghc/ghc/-/commit/c49250d88915db6acf88d2574db827cc2c4fa080)\\\\].\\n* Fixed a very old GHC issue \\\\[[#1257](https://gitlab.haskell.org/ghc/ghc/-/issues/1257)\\\\] by making GHCi support unboxed values \\\\[[!4412](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4412)\\\\]: ByteCode is now generated from STG instead of directly from Core. It allows more Haskell codes to be supported by HLS and it even allows GHC code to be loaded into GHCi \\\\[[link](https://mail.haskell.org/pipermail/ghc-devs/2021-October/020345.html)\\\\].\\n* Fixed a bug in the Cmm sinking pass that led to register corruption at runtime with the C backend. Even if we don\u2019t use the C backend, fixing this avoided spurious errors in CI jobs using it \\\\[[#19237](https://gitlab.haskell.org/ghc/ghc/-/issues/19237),[!5755](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5755/)\\\\]\\n* Fixed a register clobbering issue for 64-bit comparisons generated with the 32-bit x86 NCG backend \\\\[[commit](https://gitlab.haskell.org/ghc/ghc/-/commit/ecd6d14215eb40ac441c075e432ddaa0237f3c72)\\\\].\\n* Fixed generation of switches on sized literals in StgToCmm \\\\[[!6211](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6211)\\\\]\\n* Fixed LLVM shifts \\\\[[#19215](https://gitlab.haskell.org/ghc/ghc/-/issues/19215),[!4822](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4822)\\\\]\\n\\n## Linker\\n\\n* Fixed an off-by-one error in the MachO (Darwin) linker \\\\[[!6041](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6041/)\\\\]. The fix is simple but the debugging session was epic!\\n* Fix to avoid linking plugin units unconditionally with target code, which is wrong in general but even more so when GHC is used as a cross-compiler: plugins and target code aren\u2019t for the same platform \\\\[[#20218](https://gitlab.haskell.org/ghc/ghc/-/issues/20218),[!6496](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6496)\\\\]\\n\\n## Cross-compilation\\n\\n* With John Ericson (Obsidian Systems) we finally made GHC independent of its target \\\\[[!6791](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6791),[!6539](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6539)\\\\]. It means that there is no need to rebuild GHC to make it target another platform, so it now becomes possible to add support for a `--target=...` command-line flag \\\\[[#11470](https://gitlab.haskell.org/ghc/ghc/-/issues/11470)\\\\]. It also means that a cross-compiling GHC could build plugins for its host platform in addition to building code for its target platform.\\n* A side-effect of the previous bullet is that primops\u2019 types are now platform independent. Previously some of them would use Word64 on 32-bit architectures and Word on 64-bit architectures: now Word64 is used on every platform. A side-effect of this side-effect is that we had to make Word64 as efficient as Word: it now benefits from the same optimizations (constant folding [#19024](https://gitlab.haskell.org/ghc/ghc/-/issues/19024), etc.). On 32-bit platforms, it reduced allocations by a fair amount in some cases: e.g. -25.8% in T9203 test and -11.5% when running haddock on base library \\\\[[!6167](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6167)\\\\]. We hope it will benefit other 32-bit architectures such as JavaScript or WebAssembly.\\n* GHC built as a cross-compiler doesn\u2019t support compiler plugins \\\\[[#14335](https://gitlab.haskell.org/ghc/ghc/-/issues/14335)\\\\]. We have been working on refactoring GHC to make it support two separate environments in a given compiler session \u2013 one for target code and another for the plugin/compiler code. The implementation in \\\\[[!6748](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6748)\\\\] conflicts quite a lot with the support of multiple home-units that was added at about the same time. GHC needs to be refactored a lot more to correctly support this approach, so instead we implemented a different approach to load plugins which is more low-level and bypasses the issue \\\\[[#20964](https://gitlab.haskell.org/ghc/ghc/-/issues/20964), [!7377](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377)\\\\].\\n* We made GHC consider the target platform instead of the host platform in guessOutputFile \\\\[[!6116](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6116)\\\\]\\n* Use target platform instead of host platform to detect literal overflows \\\\[[#17336](https://gitlab.haskell.org/ghc/ghc/-/issues/17336),[!4986](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4986)\\\\]\\n\\n## GHCJS\\n\\n* We updated GHCJS to use GHC 8.10.7 \\\\[[branch](https://github.com/ghcjs/ghcjs/tree/ghc-8.10)\\\\]\\n* We worked on making GHCJS\u2019s codebase more suitable for integration into GHC: reducing the number of dependencies, avoiding the use of Template Haskell, reusing GHC\u2019s build system, etc. There is now a GHCJS integrated into a GHC 8.10.7 fork \\\\[[branch](https://github.com/ghcjs/ghc/tree/ghc-8.10-ghcjs)\\\\].\\n* This experience led us to plan the realization of a JS backend into GHC head based on GHCJS. More information about this topic in our next report.\\n* We worked on making GHC\u2019s testsuite pass with GHCJS, triaging tests that legitimately fail on a JS platform from tests revealing real GHCJS issues. **\\\\[LINK\\\\]**\\n\\n## Windows\\n\\n* We seemed to be the first to try to build GHC on Windows with the updated GNU autotools 2.70 and this release made a breaking change to the way auxiliary files (config.guess, config.sub) were handled, breaking GHC\u2019s build ([#19189](https://gitlab.haskell.org/ghc/ghc/-/issues/19189#note_332168)). The root cause of the issue couldn\u2019t be easily solved so we modified GHC\u2019s build system to avoid the use of these auxiliary files, bypassing the issue. Most GHC devs won\u2019t ever notice that something was broken to begin with when they will update their GNU toolchain on Windows. \\\\[[!4768](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4768),[!4987](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4987),[!5065](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5065/)\\\\]\\n* Fixed cross-compilation of GHC from Linux to Windows using Hadrian \\\\[[#20657](https://gitlab.haskell.org/ghc/ghc/-/issues/20657),[!6945](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6945),[!6958](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6958)\\\\]\\n\\n## Numeric\\n\\n* Fixed Natural to Float/Double conversions to align with the method used for Integer to Float/Double and added missing rewrite rules \\\\[[!6004](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6004/)\\\\]\\n* Made most bignum literals be desugared into their final form in HsToCore stage instead of CoreToStg stage to ensure that Core optimizations were applied correctly to them \\\\[[#20245](https://gitlab.haskell.org/ghc/ghc/-/issues/20245),[!6376](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6376)\\\\]\\n* Some constant folding rules were missing and were added:\\n  * bitwise `and` primops when applied to a full mask (e.g. 0xFF for a 8-bit word). \\\\[[#20448](https://gitlab.haskell.org/ghc/ghc/-/issues/20448),[!6629](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6629)\\\\]\\n  * `negate` primops [#20347](https://gitlab.haskell.org/ghc/ghc/-/issues/20347),[!6535](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6535)\\n  * `timesInt2#` primop [#20374](https://gitlab.haskell.org/ghc/ghc/-/issues/20374),[!6531](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6531)\\n  * `ctz#/clz#/popCnt#` [#20376](https://gitlab.haskell.org/ghc/ghc/-/issues/20376),[!6532](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6532)\\n  * missing rewrite rule to make the implementation of `nat2Word#` efficient \\\\[[#15547](https://gitlab.haskell.org/ghc/ghc/-/issues/15547),[!6847](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6847)\\\\]\\n  * rules for `Natural` \\\\[[#15821](https://gitlab.haskell.org/ghc/ghc/-/issues/15821),[!4837](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4837)\\\\]\\n* Allowed some ghc-bignum operations to inline to get better performance, while still managing to keep constant-folding working \\\\[[#19641](https://gitlab.haskell.org/ghc/ghc/-/issues/19641),[!6677](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6677),[!6696](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6696),[!6306](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6306)\\\\]. There is some work left to do (cf [#20361](https://gitlab.haskell.org/ghc/ghc/-/issues/20361)) but it is blocked by [#19313](https://gitlab.haskell.org/ghc/ghc/-/issues/19313) which in turn is blocked by [#20554](https://gitlab.haskell.org/ghc/ghc/-/issues/20554) which should be fixed soon ([!6865](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6865), thanks Joachim!).\\n* The ubiquitous `fromIntegral` function used to have many associated rewrite rules to make it fast (avoiding heap allocation of a passthrough Integer when possible) that were difficult to manage due to the combinatorial number of needed rules ([#19907](https://gitlab.haskell.org/ghc/ghc/-/issues/19907), [#20062](https://gitlab.haskell.org/ghc/ghc/-/issues/20062)). We found a way to remove all these rules ([!5862](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5862)).\\n\\n## Technical debt & modularity\\n\\n* Made several component of the compiler independent of `DynFlags` (parsed command-line flags):\\n  * TmpFS (dealing with temporary files) \\\\[[!6186](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6186)\\\\]\\n  * Diagnostic options \\\\[[!6043](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6043)\\\\]\\n  * Tracing functions \\\\[[!5970](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5970)\\\\]\\n  * Logger \\\\[[!4757](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4757)\\\\]\\n  * Logger & Parser \\\\[[!5845](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5845)\\\\]\\n  * Hooks \\\\[[!4812](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4812)\\\\]\\n* Made the handling of \u201cpackage imports\u201d less fragile \\\\[[!6586](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6586)\\\\] and refactored some code related to dependencies and recompilation avoidance \\\\[[!6528](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6528),[!6346](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6346)\\\\].\\n* Abstracted plugin related fields from HscEnv \\\\[[!7175](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7175)\\\\]\\n* Made a home-unit optional in several places \\\\[[!7013](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7013/)\\\\]: the home-unit should only be required when compiling code, not when loading code (e.g. when loading plugins in cross-compilers [#14335](https://gitlab.haskell.org/ghc/ghc/-/issues/14335)).\\n* Made GHC no longer expose the (wrong) selected ghc-bignum backend with `ghc --info`. ghc-bignum now exposes a backendName function for this purpose \\\\[[#20495](https://gitlab.haskell.org/ghc/ghc/-/issues/20495),[!6903](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6903)\\\\]\\n* Moved `tmpDir` from Settings to `DynFlags` \\\\[[!6297](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6297/)\\\\]\\n* Removed use of `unsafePerfomIO` in `getProgName` \\\\[[!6137](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6137/)\\\\]\\n* Refactored warning flags handling \\\\[[!5815](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5815)\\\\]\\n* Made assertions use normal functions instead of CPP \\\\[[!5693](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5693)\\\\]\\n* Made the interpreter more independent of the driver \\\\[[!5627](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5627)\\\\]\\n* Replaced `ptext . sLit` with `text` \\\\[[!5625](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5625)\\\\]\\n* Removed broken \u201cdynamic-by-default\u201d setting \\\\[[#16782](https://gitlab.haskell.org/ghc/ghc/-/issues/16782),[!5467](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5467)\\\\]\\n* Abstracted some components from the compiler session state (`HscEnv`):\\n  * unit-related fields into a new `UnitEnv`datatype \\\\[[!5425](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5425)\\\\]\\n  * `FinderCache` and `NameCache`\\\\[[!4951](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4951)\\\\]\\n  * Loader state \\\\[[!5287](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5287)\\\\]\\n* Removed the need for a home unit-id to initialize an external package state (EPS) \\\\[[!5043](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5043)\\\\]\\n* Refactored `-dynamic-too` handling \\\\[[#19264](https://gitlab.haskell.org/ghc/ghc/-/issues/19264),[!4905](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4905)\\\\]\\n\\n## Performance\\n\\n* Made `divInt#, modInt# and divModInt#` branchless and inlineable \\\\[[#18067](https://gitlab.haskell.org/ghc/ghc/-/issues/18067),[#19636](https://gitlab.haskell.org/ghc/ghc/-/issues/19636),[!3229](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3229)\\\\]\\n* Fixed Integral instances for Word8/16/32 and `showWord` to use `quotRemWordN` \\\\[[!5891](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5891),[!5846](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5846/)\\\\]\\n* Improved performance of occurrence analysis \\\\[[#19989](https://gitlab.haskell.org/ghc/ghc/-/issues/19989),[!5977](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5977)\\\\]\\n* Fixed unnecessary pinned allocations in `appendFS` \\\\[[!5989](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5989/)\\\\]\\n* Added a rewrite rules for string literals:\\n  * Concatenation of string literals \\\\[[#20174](https://gitlab.haskell.org/ghc/ghc/-/issues/20174),[#16373](https://gitlab.haskell.org/ghc/ghc/-/issues/16373),[!6259](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6259)\\\\]\\n  * `(++) . unpackCString# \u21d2 unpackAppendCString#` leading to a 15% reduction in compilation time on a specific example. \\\\[[!6619](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6619)\\\\]\\n  * Compute SDoc literal size at compilation time \\\\[[#19266](https://gitlab.haskell.org/ghc/ghc/-/issues/19266), [!4901](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4901)\\\\]\\n* Fix for Dwarf strings generated by the NCG that were unnecessarily retained in the FastString table \\\\[[!6621](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6621)\\\\]\\n* Worked on improving inlining heuristics by taking into account applied constructors at call sites \\\\[[#20516](https://gitlab.haskell.org/ghc/ghc/-/issues/20516),[!6732](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6732)\\\\]. More work is needed though.\\n* Fixed [#20857](https://gitlab.haskell.org/ghc/ghc/-/issues/20857) by making the Id cache for primops used more often \\\\[[!7241](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7241)\\\\]\\n* Replaced some avoidable uses of `replicateM . length` with more efficient code \\\\[[!7198](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7198)\\\\]. No performance gain this time but the next reader of this code won\u2019t have to wonder if fixing it could improve performance.\\n* Made `exprIsCheapX` inline for modest but easy perf improvements \\\\[[!7183](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7183)\\\\]\\n* Removed an allocation in the code used to write text on a Handle (used by putStrLn, etc.) \\\\[[!7160](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7160)\\\\]\\n* Replaced inefficient list operations with more efficient `Monoid ([a],[b])` operations in the driver \\\\[[!7069](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7069)\\\\], leading to 1.9% reduction in compiler allocations in MultiLayerModules test.\\n* Disabled some callstack allocations in non-debug builds \\\\[[!6252](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6252/)\\\\]\\n* Made file copy in GHC more efficient \\\\[[!5801](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5801)\\\\]\\n* Miscellaneous pretty-printer enhancements \\\\[[!5226](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5226)\\\\]\\n* Type tidying perf improvements with strictness \\\\[[#14738](https://gitlab.haskell.org/ghc/ghc/-/issues/14738),[!4892](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4892)\\\\]\\n\\n## RTS\\n\\n* Fixed issues related to the RTS\u2019s ticker\\n  * Fixed some races \\\\[[#18033](https://gitlab.haskell.org/ghc/ghc/-/issues/18033),[#20132](https://gitlab.haskell.org/ghc/ghc/-/issues/20132),[!6201](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6201)\\\\]\\n  * Made the RTS open the file descriptor for its timer (`timerfd`) on Linux synchronously to avoid weird interactions with Haskell code manipulating file descriptors \\\\[[#20618](https://gitlab.haskell.org/ghc/ghc/-/issues/20618),[!6902](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6902)\\\\].\\n* Moved GHC\u2019s global variables used to manage Uniques into the RTS to fix plugin issues \\\\[[#19940](https://gitlab.haskell.org/ghc/ghc/-/issues/19940),[!5900](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5900)\\\\]\\n\\n## Build system / CI\\n\\n* Fixed Hadrian output to display warnings and errors after the multi screen long command lines \\\\[[#20490](https://gitlab.haskell.org/ghc/ghc/-/issues/20490),[!6690](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6690)\\\\]\\n* Avoided the installation of a global `platformConstants` file; made GHC load constants from the RTS unit instead, allowing it to be reinstalled with different constants \\\\[[!5427](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5427)\\\\]\\n* Made `deriveConstants` output its file atomically \\\\[[#19684](https://gitlab.haskell.org/ghc/ghc/-/issues/19684),[!5520](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5520)\\\\]\\n* Made compression with `xz` faster on CI \\\\[[!5066](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5066)\\\\]\\n* Don\u2019t build extra object with `-no-hs-main` \\\\[[#18938](https://gitlab.haskell.org/ghc/ghc/-/issues/18938),[!4974](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4974)\\\\]\\n* Add `hi-boot` dependencies with `ghc -M` \\\\[[#14482](https://gitlab.haskell.org/ghc/ghc/-/issues/14482),[!4876](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4876)\\\\]\\n\\n## Misc\\n\\n* Stack: fixed interface reading in `hi-file-parser` to support GHC 8.10 and 9.0 \\\\[[PR](https://github.com/commercialhaskell/hi-file-parser/pull/2), [Stack#5134](https://github.com/commercialhaskell/stack/issues/5134)\\\\]\\n* Enhanced pretty-printing of coercions in Core dumps \\\\[[!4856](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4856)\\\\]"},{"id":"2022-03-01-haskell-nix-february-update","metadata":{"permalink":"/2022-03-01-haskell-nix-february-update","source":"@site/blog/2022-03-01-haskell-nix-february-update-wDy26Ro4GN-import.md","title":"haskell.nix February Update","description":"Documentation","date":"2022-03-01T00:00:00.000Z","formattedDate":"March 1, 2022","tags":[{"label":"nix","permalink":"/tags/nix"}],"readingTime":1.275,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-03-01-haskell-nix-february-update","title":"haskell.nix February Update","authors":[],"tags":["nix"],"custom_edit_url":null},"prevItem":{"title":"2021 GHC update","permalink":"/2022-03-01-2021-ghc-update"},"nextItem":{"title":"GHC January 2022 update","permalink":"/2022-02-01-ghc-january-2022-update"}},"content":"## Documentation\\n\\n* A tutorial has been added on [building DWARF-enabled executables](https://outline.zw3rk.com/share/d461004d-1f2f-4d7a-95f2-4e20acb18cac) on linux systems.  There was also a related fix for building DWARF executables in a nix shell ([#1385](https://github.com/input-output-hk/haskell.nix/pull/1385))\\n\\n## Changes\\n\\n* Support for external Hackage repositories was improved by [#1370](https://github.com/input-output-hk/haskell.nix/pull/1370). We can now use an extra package repository just by adding a `repository` block to the `cabal.project` file.  This makes it easy to make use of an extra hackage databases such as [hackage.head](https://ghc.gitlab.haskell.org/head.hackage/) and [hackage-overlay-ghcjs](https://github.com/input-output-hk/hackage-overlay-ghcjs).  A `sha256` for the repository it can be added as a comment in the `repository` block or by including it in the `sha256map` argument.\\n\\n## Version Updates\\n\\n* nix-tools was updated to use the Cabal 3.6.2 and hnix 0.16 [nix-tools#113](https://github.com/input-output-hk/nix-tools/pull/113)\\n* Nixpkgs pins were bumped [#1371](https://github.com/input-output-hk/haskell.nix/pull/1371)\\n* Update booting on aarch64 linux to ghc 8.8.4 [1325](https://github.com/input-output-hk/haskell.nix/pull/1325) and [1374](https://github.com/input-output-hk/haskell.nix/pull/1374)\\n\\n## Bug fixes\\n\\n* Allow linking pcre statically with musl [#1363](https://github.com/input-output-hk/haskell.nix/pull/1363)\\n* Add gpiod to system nixpkgs map [#1359](https://github.com/input-output-hk/haskell.nix/pull/1359)\\n* Add poppler-cpp to png-config Nixpkgs map [#1373](https://github.com/input-output-hk/haskell.nix/pull/1373)\\n* Use the same logic that cabal-install uses for determining the path of a packages `.tar.gz` in a repository  [nix-tools#114](https://github.com/input-output-hk/nix-tools/pull/114)\\n* Fix libnuma dependency in rts.conf [1342](https://github.com/input-output-hk/haskell.nix/commit/18ebf60137dd2ff1be7363eb46f67ebfa366d1dd)\\n* Fix when \\"materialized\\" dir is deep [#1376](https://github.com/input-output-hk/haskell.nix/pull/1376)\\n* Prefer local building for `git-ls-files` [#1378](https://github.com/input-output-hk/haskell.nix/pull/1378) and [#1381](https://github.com/input-output-hk/haskell.nix/issues/1381)\\n* Fix stack cache generator `sha256` is a string not a lambda [#1383](https://github.com/input-output-hk/haskell.nix/pull/1383)\\n* Only pass `--index-state` to `cabal` when asked [#1384](https://github.com/input-output-hk/haskell.nix/pull/1384)\\n* Pass `enableDWARF` to `makeConfigFiles` to fix `-g3` support in `nix-shell` [#1385](https://github.com/input-output-hk/haskell.nix/pull/1385)\\n\\nFinally, we\u2019d like to thank all the awesome contributors, who make\xa0`haskell.nix`\xa0a thriving open source project!\xa0:heart:"},{"id":"2022-02-01-ghc-january-2022-update","metadata":{"permalink":"/2022-02-01-ghc-january-2022-update","source":"@site/blog/2022-02-01-ghc-january-2022-update-jTlkXUxJSn-import.md","title":"GHC January 2022 update","description":"Hopefully 2022 should be the year GHC will get a JavaScript backend without relying on GHCJS. This month the team has been busy planning the work that needs to be done to get there!","date":"2022-02-01T00:00:00.000Z","formattedDate":"February 1, 2022","tags":[{"label":"ghc","permalink":"/tags/ghc"}],"readingTime":0.9,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-02-01-ghc-january-2022-update","title":"GHC January 2022 update","authors":[],"tags":["ghc"],"custom_edit_url":null},"prevItem":{"title":"haskell.nix February Update","permalink":"/2022-03-01-haskell-nix-february-update"},"nextItem":{"title":"haskell.nix January Update","permalink":"/2022-02-01-haskell-nix-january-update"}},"content":"Hopefully 2022 should be the year GHC will get a JavaScript backend without relying on GHCJS. This month the team has been busy planning the work that needs to be done to get there!\\n\\n## Cross-compilation\\n\\n* GHCJS has been [updated](https://github.com/ghcjs/ghc/tree/ghc-8.10-ghcjs) to reduce the gap with GHC 8.10.7 codebase to the point that GHC\u2019s build system is used to build GHCJS\\n* Internal work planning for the integration of GHCJS into GHC\\n* A different approach to load plugins into cross-compilers has been implemented \\\\[[#20964](https://gitlab.haskell.org/ghc/ghc/-/issues/20964), [!7377](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377)\\\\]\\n* GHCJS has been exercised to showcase compilation of some Plutus applications\\n\\n## Modularity\\n\\n* A few \u201csubsystems\u201d of GHC have been made more modular and reusable by making them independent of the command-line flags (`DynFlags`) \\\\[[#17957](https://gitlab.haskell.org/ghc/ghc/-/issues/17957), [!7158](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7158), [!7199](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7199), [!7325](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7325)\\\\]. This work resulted in a 10% reduction in call sites to `DynFlags` and has now removed all references to `DynFlags` up to the `CoreToStg` pass, which is almost the entire backend of GHC.\\n\\n## Performance\\n\\n* Jeffrey wrote a new HF [proposal](https://github.com/haskellfoundation/tech-proposals/pull/26) about writing a Haskell Optimization handbook and has started working on it"},{"id":"2022-02-01-haskell-nix-january-update","metadata":{"permalink":"/2022-02-01-haskell-nix-january-update","source":"@site/blog/2022-02-01-haskell-nix-january-update-vNau7aVn4Q-import.md","title":"haskell.nix January Update","description":"January 2022","date":"2022-02-01T00:00:00.000Z","formattedDate":"February 1, 2022","tags":[{"label":"nix","permalink":"/tags/nix"}],"readingTime":1.215,"truncated":false,"authors":[],"frontMatter":{"slug":"2022-02-01-haskell-nix-january-update","title":"haskell.nix January Update","authors":[],"tags":["nix"],"custom_edit_url":null},"prevItem":{"title":"GHC January 2022 update","permalink":"/2022-02-01-ghc-january-2022-update"}},"content":"## **January 2022**\\n\\nThis month we merged some very significant improvements to the support for compiling for Android and iOS based AArch64 devices.\xa0 When the build system is also AArch64 template haskell can often be run locally.\xa0 This will make targeting mobile devices from AArch64 builders much easier.\\n\\nA long running branch containing bug fixes for cross compilation to JavaScript with GHCJS was merged.\xa0 One nice feature included is better support for adding bindings to C code compiled with emscripten.\xa0 In some cases it can be as easy as adding a single JavaScript file to the package with wrappers for the C functions.\\n\\n#### Changes\\n\\n* Much improved AArch64 support including Template Haskell (#1316)\\n* Improved GHCJS and support for calling C code compiled with emscripten (#1311)\\n* The environment variables LANG and LOCALE_ARCHIVE are no longer set in shells allowing the users prefered settings to persist (#1341).\\n* source-repo-override argument added for cabal projects to allow the location of source-repository-package packages to be replaced (#1354)\\n\\n#### Version Updates\\n\\n* GHC 9.0.2 was added to the available GHC versions (#1338)\\n* The nixpkgs pins for 21.05, 21.11 and unstable were all updated (#1334).\\n* Remaining uses of cabal 3.4 were updated to 3.6.2 (#1328)\\n\\n#### Bug fixes\\n\\n* Dwarf build of ghc 9.2.1 now skipped on hydra to work around 4GB hydra limit (#1333)\\n* Removed use of propagatedBuildInputs in ghc derivation (#1318).\\n* Caching of the check-hydra CI script was fixed (#1340)"}]}')}}]);